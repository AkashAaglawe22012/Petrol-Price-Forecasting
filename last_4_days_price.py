# -*- coding: utf-8 -*-
"""last_4_days_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XUKN3fPMPC_QJkRIWpCnbrv5l9lwi5Ia
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import datetime
from datetime import timedelta

df = pd.read_csv("train_data.csv")

df.shape

df.head(5)

df.tail(5)

df.rename(columns = {'Petrol (USD)':'Petrol_Price'},inplace=True)

df.head(5)

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

df=df.reset_index(drop=True)

df

df.info()

df.describe()

import plotly.express as px
import matplotlib.pyplot as plt

fig = px.line(df,x = df.Date,y = df.Petrol_Price)
fig.update_traces(marker_line_width=5, opacity=0.9)
fig.update_layout(title_text='Whole period of timeframe of Petrol price 2013-2018',
                  font_size=15, font_color='black')

fig.show()

plt.figure(figsize=(18,6))
plt.plot(df.Petrol_Price,label='origanl prie of petrol from jun 2003 to dec 2018')
mean_2 = df.Petrol_Price.rolling(2).mean()
mean_4 = df.Petrol_Price.rolling(4).mean()
mean_10 = df.Petrol_Price.rolling(10).mean()
plt.plot(mean_2,'r',label='AVERAGE PRICE OF PETROL OF LAST 2-DAYS ')
plt.plot(mean_4,'g',label='AVERAGE PRICE OF PETROL OF LAST 4-DAYS ')
plt.plot(mean_10,label='AVERAGE PRICE OF PETROL OF LAST 10-DAYS ')
plt.title("ORIGENAL AND AVERAGE OF LAST 2-DAYS AND AVERAGE OF LAST 4-DAYS")
plt.xlabel('RECORDS')
plt.ylabel('PRICE')
plt.legend()
plt.show()

df

"""## MinMaxScaler"""

Petrol_Price_1 = df['Petrol_Price']
Petrol_Price_1= (np.array(Petrol_Price_1))

Petrol_Price_1

Petrol_Price_1=Petrol_Price_1.reshape(-1,1)

Petrol_Price_1

ms = MinMaxScaler()
Petrol_Price_1 = ms.fit_transform(Petrol_Price_1)

Petrol_Price_1.shape

type(Petrol_Price_1)

Petrol_Price_1

"""## Data Creation"""

Petrol_Price_1.shape

Petrol_Price_1[810]

len(Petrol_Price_1)-4-1

(Petrol_Price_1[810])

data=[]
def create_dataset(n):
  for i in range(len(Petrol_Price_1)-n-1):
    a=[]
    a.append(Petrol_Price_1[i][0])
    a.append(Petrol_Price_1[i+1][0])
    a.append(Petrol_Price_1[i+2][0])
    a.append(Petrol_Price_1[i+3][0])
    b=(float((Petrol_Price_1[i]+Petrol_Price_1[i+1]+Petrol_Price_1[i+2][0]+Petrol_Price_1[i+3][0])/4))
    a.append((b))

    data.append(a)

create_dataset(4)

Petrol_Price_1[3:10]

data

"""## dependant and independent variable"""

type(data[10][0])

data[0][4]

len(data)
l=[]
for i in range(len(data)):
  l.append(data[i][4])

y=np.array(l)

print(y.ndim)
print(y.shape)

y

len(data)
x=[]
for i in range(len(data)):
  l=[]
  l.append(data[i][0])
  l.append(data[i][1])
  l.append(data[i][2])
  l.append(data[i][3])
  x.append(l)

x

x=np.array(x)
print(x.shape)
print(x.ndim)

"""## split data for traing and testing"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.35,random_state=99)

print("x_train.shape",x_train.shape)
print("x_test.shape",x_test.shape)
print("y_train.shape",y_train.shape)
print("y_test.shape",y_test.shape)

print("x_train",x_train[:5])
print("x_test",x_test[:5])
print("y_train",y_train[:5])
print("y_test",y_test[:5])

"""## Apply Different Machine Learning Model"""

from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
import math
from sklearn.metrics import r2_score

from sklearn.linear_model import LinearRegression

lg = LinearRegression()
lg.fit(x_train,y_train)
y_pred = lg.predict(x_test)

r2 = r2_score(y_test,y_pred)
r2

Ar2 = 1-((1-r2)*(324-1)/(324-1-2))

print('Ar2 = ',Ar2)
print('r2 = ',r2)

"""## SVM"""

from sklearn import svm

sr = svm.SVR(kernel='linear')
sr.fit(x_train,y_train)
y2_pred = sr.predict(x_test)

R2=r2_score(y_test,y2_pred)
R2

AR2 = 1-((1-R2)*(324-1)/(324-1-2))

print('Ar2 = ',AR2)
print('r2 = ',R2)

"""## KNN"""

from sklearn.neighbors import KNeighborsRegressor

knn = KNeighborsRegressor()
knn.fit(x_train,y_train)
y_pred = knn.predict(x_test)

r = r2_score(y_test,y_pred)

Aknn = 1-((1-r)*(324-1)/(324-1-2))

print('Ar2 = ',Aknn)
print('r2 = ',r)

"""## Decision Tree - Regression"""

from sklearn.tree import DecisionTreeRegressor

dt = DecisionTreeRegressor()
dt.fit(x_train,y_train)
ydt_pred = dt.predict(x_test)

R2_dt = r2_score(y_test,ydt_pred)

AR2_dt = 1-((1-R2_dt)*(324-1)/(324-1-2))

print('AR2_dt = ',AR2_dt)
print('R2_dt = ',R2_dt)

"""## RandomForest"""

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor()
rf.fit(x_train,y_train)
yrf_pred = rf.predict(x_test)

R2_rf = r2_score(y_test,yrf_pred)
AR2_rf = 1-((1-R2_rf)*(324-1)/(324-1-2))

print('AR2_rf = ',AR2_rf)
print('R2_rf = ',R2_rf)

"""## Pridict N-Days price"""

df.tail(10)

(len(df["Petrol_Price"]))-4

s=np.array(df['Petrol_Price'][807:])

s

s.shape

s=s.reshape(-1,1)

(df['Petrol_Price'][807:])

d=[]
l=[]
da=[]
result=[]
def predict_price(n):
  s=np.array(df['Petrol_Price'][807:])
  #for i in range(len(s)):
  a=s.reshape(-1,1)
  print(a)
  r=(ms.transform(a))
  da.append(r)
  for i in range(len(da[0])):
    l.append(da[0][i][0])
  d.append(l)
  print(d)
  #print(rf.predict(d))


  for i in range(n):
    m=[]
    if(len(d)<n):
      m.append(d[i][1])
      m.append(d[i][2])
      m.append(d[i][3])
      a=(rf.predict([d[i]]))
      result.append(a[0])
      m.append(a[0])
      d.append(m)
      #print(d)
      #n=n-1

    else:
      a=(rf.predict([d[i]]))
      result.append(a[0])
      break

n = int(input("ENTER HOW MANY DAY DO YOU WANT PREDICT the price"))
predict_price(n)

rf.predict([d[9]])

len(result)

for i in range(len(d)):
  print("{} day input {}".format(i+1,d[i]))
  print("{} day output {}".format(i+1,result[i]))

ms.inverse_transform([result])

ms.inverse_transform([d[0]])

df.tail()

df['Date'] = pd.to_datetime(df['Date'])

df.info()

c=(df['Date'][810])

len(df['Petrol_Price'])
data=[]
for i in range(len(df['Petrol_Price'])):
  data.append(df['Petrol_Price'][i])

re=[]
re=ms.inverse_transform([result])
re

len(re[0])

re[0][1]

for i in range(len(re[0])):
  #print(i)
  data.append(re[0][i])

len(data)

data

type(df['Date'])

from datetime import datetime

Date=[]

for i in range(len(df['Date'])):
  Date.append(df['Date'][i])

nm=(len(df['Date'])-1)

from datetime import datetime,timedelta

for i in range(n):
  Date.append((df['Date'][nm]) + timedelta(days=i+1))

Date

ds={'Date':Date,'Petrol_Price':data}

df4=pd.DataFrame(ds)

df4.head()

df4.shape

df4.info()

fig = px.line(df4, x=df4.Date, y=df4.Petrol_Price)
fig.update_traces(marker_line_width=5, opacity=0.9)
fig.update_layout(title_text='WHOLE PERIOD OF TIMEFRAME OF Petrol_Price',
                  font_size=15, font_color='black')
fig.show()

df4.tail(n+5)

import pickle

pickle.dump(rf,open('model.pkl','wb'))

model = pickle.load(open('model.pkl','rb'))

model.predict([[0.4176929748482222, 0.40598438855160446, 0.4024284475281873, 0.39869904596704264]])

pickle.dump(ms,open('ms.pkl','wb'))

result = np.array(result)
result=result.reshape(-1,1)

len(result)

ms = pickle.load(open('ms.pkl','rb'))

re=[]
for i in result:
  print(i)
  r=(ms.inverse_transform([i]))
  re.append(r[0][0])

re

pip show scikit-learn